#!/bin/bash
# install kubernetes components on Node host

echo "Set locale to en_US.UTF-8"
export LANG=en_US.UTF-8

# TODO change rules, not disable
echo "Setting up firewall rules..."
systemctl stop firewalld
systemctl disable firewalld



#0 Install ntp, we need correct time for node logs
yum install -y ntp
ntpd -gq
systemctl start ntpd; systemctl enable ntpd
ntpq -p



echo "Using MASTER_IP={{ master_ip }}"



# 1. create yum repo file

cat > /etc/yum.repos.d/kube-cloudlinux.repo << EOF
[kube]
name=kube
baseurl=http://repo.cloudlinux.com/kubernetes/x86_64/
enabled=1
gpgcheck=1
gpgkey=http://repo.cloudlinux.com/cloudlinux/security/RPM-GPG-KEY-CloudLinux
EOF



# 1.1 import CloudLinux key
rpm --import http://repo.cloudlinux.com/cloudlinux/security/RPM-GPG-KEY-CloudLinux



# 2. install components
echo "Installing kubernetes..."
#yum -y install kubernetes
yum -y install http://repo.cloudlinux.com/kubernetes/x86_64/kubernetes-0.12.0-0.1.gitecca426.el7.centos.x86_64.rpm
yum -y install flannel
yum -y install cadvisor



# 3. configure Node config
echo "Configuring services..."
cat > /etc/kubernetes/config << EOF
###
# kubernetes system config
#
# The following values are used to configure various aspects of all
# kubernetes services, including
#
#   kubernetes-apiserver.service
#   kubernetes-controller-manager.service
#   kubernetes-scheduler.service
#   kubelet.service
#   kubernetes-proxy.service

# Comma seperated list of nodes in the etcd cluster
KUBE_ETCD_SERVERS="--etcd_servers=http://{{ master_ip }}:4001"

# logging to stderr means we get it in the systemd journal
KUBE_LOGTOSTDERR="--logtostderr=true"

# journal message level, 0 is debug
KUBE_LOG_LEVEL="--v=0"

# Should this cluster be allowed to run privleged docker containers
KUBE_ALLOW_PRIV="--allow_privileged=false"
EOF



# 4. configure Node kubelet

cat > /etc/kubernetes/kubelet << EOF
###
# kubernetes kubelet (Node) config

# The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)
KUBELET_ADDRESS="--address=0.0.0.0"

# The port for the info server to serve on
KUBELET_PORT="--port=10250"

# You may leave this blank to use the actual hostname
KUBELET_HOSTNAME=""

# location of the api-server
KUBELET_API_SERVER="--api_servers={{ master_ip }}:8080"

# Additional configuration for using manifests on local node
KUBELET_ARGS="--config=/etc/kubernetes/manifests"
EOF



# 5. configure Flannel

cat > /etc/sysconfig/flanneld << EOF
# Flanneld configuration options

# etcd url location.  Point this to the server where etcd runs
FLANNEL_ETCD="http://{{ master_ip }}:4001"

# etcd config key.  This is the configuration key that flannel queries
# For address range assignment
FLANNEL_ETCD_KEY="/kuberdock/network/"

# Any additional options that you want to pass
FLANNEL_OPTIONS="--iface={{ inet_iface }}"
EOF
systemctl enable flanneld; systemctl restart flanneld


# 6. Setting kernel parameters
sysctl -w net.ipv4.ip_nonlocal_bind=1
cat > /etc/sysctl.d/75-kuberdock.conf << EOF
net.ipv4.ip_nonlocal_bind = 1
EOF



# 7. setup rsyslog forwarding
echo "Reconfiguring rsyslog..."
cat > /etc/rsyslog.d/kuberdock.conf << EOF
*.* @127.0.0.1:5140
EOF

systemctl restart rsyslog



# 8. setup service pods
echo 'Setup service pods...'

# pull images (update if already exists)
systemctl enable docker; systemctl restart docker

docker pull kuberdock/fluentd:1.0 > /dev/null 2>&1 &
docker pull kuberdock/elasticsearch:1.0 > /dev/null 2>&1 &

if [ -d /etc/kubernetes/manifests ]; then
  # remove old pods if exists
  rm -f /etc/kubernetes/manifests/kuberdock-*.manifest
  for c in $(docker ps -a | grep 'kuberdock-.*\.file' | awk '{print $1}'); do
    docker rm -f $c > /dev/null 2>&1
  done
else
  mkdir /etc/kubernetes/manifests
fi

# fix elasticsearch home directory ownership (if ES was running as service)
if [ -d /var/lib/elasticsearch ]; then
  chown -R root:root /var/lib/elasticsearch
fi

cat > /etc/kubernetes/manifests/kuberdock-logs.manifest << EOF
apiVersion: v1beta2
id: kuberdock-logs
containers:
  - name: fluentd
    image: kuberdock/fluentd:1.0
    env:
      - name: NODENAME
        value: $(hostname)
      - name: ES_HOST
        value: 127.0.0.1
    ports:
      - name: syslog
        containerPort: 5140
        hostPort: 5140
        protocol: UDP
    volumeMounts:
      - name: docker-containers
        mountPath: /var/lib/docker/containers
  - name: elasticsearch
    image: kuberdock/elasticsearch:1.0
    env:
      - name: ETCD_HOST
        value: {{ master_ip }}
    ports:
      - name: es-port
        containerPort: 9200
        hostPort: 9200
      - name: es-transport-port
        containerPort: 9300
        hostPort: 9300
    volumeMounts:
      - name: es-persistent-storage
        mountPath: /elasticsearch/data
volumes:
  - name: docker-containers
    source:
      hostDir:
        path: /var/lib/docker/containers
  - name: es-persistent-storage
    source:
      hostDir:
        path: /var/lib/elasticsearch
EOF



# 9. enable services
echo "Starting services..."
systemctl enable kubelet; systemctl restart kubelet
systemctl enable kube-proxy; systemctl restart kube-proxy

CADVISOR_CONF=/etc/sysconfig/cadvisor
sed -i "/^CADVISOR_STORAGE_DRIVER/ {s/\"\"/\"influxdb\"/}" $CADVISOR_CONF
sed -i "/^CADVISOR_STORAGE_DRIVER_HOST/ {s/localhost/{{ master_ip }}/}" $CADVISOR_CONF
systemctl enable cadvisor; systemctl restart cadvisor

exit 0
