#
# KuberDock - is a platform that allows users to run applications using Docker
# container images and create SaaS / PaaS based on these applications.
# Copyright (C) 2017 Cloud Linux INC
#
# This file is part of KuberDock.
#
# KuberDock is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# KuberDock is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KuberDock; if not, see <http://www.gnu.org/licenses/>.
#
- include: ../../../facts.yml

- debug: msg="Builds directory on host - {{ host_builds_path }}"
- debug: msg="Install type - {{ install_type }}"

- name: Inject shared SSH pub keys
  authorized_key: user={{ ansible_user }} key={{ item }}
  when: add_ssh_pub_keys
  with_items: "{{ lookup('file', ssh_pub_keys_path).splitlines() }}"

- name: Install epel-release
  yum: name=epel-release state=latest

- name: Add yum-config-manager
  yum: name=yum-utils disablerepo=epel

- name: Increase timeouts in YUM
  shell: "yum-config-manager --save --setopt {{ item.option }}={{ item.value }}"
  with_items:
    - option: timeout
      value: 60.0
    - option: retries
      value: 30

- name: Ensure latest ca-certificates to fix EPEL https problems
  yum: name=ca-certificates disablerepo=epel state=latest update_cache=yes

- name: Install additional packages
  yum: name={{ item }} state=latest
  with_items:
      - git
      - tmux
      - haveged

- name: start haveged
  service: name=haveged state=started
  tags:
    - non_aws

- name: Create master RPMs directory
  file: path="{{ master_rpms_dir }}" state=directory

- include: dev_predeploy.yml
  static: no
  when: is_dev_install
  tags:
    - non_aws

- include: qa_predeploy.yml
  static: no
  when: is_qa_install

- include: release_predeploy.yml
  static: no
  when: is_release_install

- name: Running cleanup (deploy.sh --cleanup)
  shell: echo "yes" | bash deploy.sh --cleanup chdir="{{ master_rpms_dir }}" | while IFS= read -r line; do echo "$(date) $line"; done
  register: cleanup_result
  tags:
    - cleanup
    - non_aws

- set_fact:
    cleanup_log: "{{ cleanup_result.stdout.split('\n') }}"
  when: add_timestamps
  tags:
    - non_aws
    - cleanup

- debug: var=cleanup_log
  when: add_timestamps
  tags:
    - cleanup
    - non_aws

- include: ceph.yml
  when: use_ceph

- include: zfs.yml
  when: use_zfs
  tags:
    - non_aws

- include: deploy.yml
  tags:
    - non_aws

- name: Reset password
  shell: python "{{ master_kd_src_path }}/manage.py" reset-password --set "{{ admin_password }}"

- include: dev_postdeploy.yml
  when: is_dev_install

- include: qa_postdeploy.yml
  when: is_qa_install

- include: release_postdeploy.yml
  when: is_release_install

- include: license.yml
  when: license_path is defined and license_path

- include: billing.yml

- name: Fetching key
  fetch: src={{ pub_key }} dest=/tmp/kd_rsa.pub fail_on_missing=yes flat=yes

- include: ip_pool.yml
  tags:
    - ippool

- name: Get existing users
  become_user: postgres
  command: psql -d kuberdock -t -c "select username from users;"
  register: users_stdout

- name: Create users
  shell: python "{{ master_kd_src_path }}/manage.py" create-user -u {{ item }} -p {{ item }} -r User
  when: item not in "{{ users_stdout.stdout.split('\n') }}'"
  with_items:
      - test_user
      - alt_test_user

- name: Update users timezone
  become_user: postgres
  command: psql -d kuberdock -c "UPDATE users SET timezone='{{ timezone }}';"
  when:  not ((timezone | default("")) == "")
  tags:
    - timezone

- include: predefined_apps.yml
  tags:
    - predefined_apps

- include: kdctl.yml

- include: kcli.yml

