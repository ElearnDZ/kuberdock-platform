#
# KuberDock - is a platform that allows users to run applications using Docker
# container images and create SaaS / PaaS based on these applications.
# Copyright (C) 2017 Cloud Linux INC
#
# This file is part of KuberDock.
#
# KuberDock is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# KuberDock is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KuberDock; if not, see <http://www.gnu.org/licenses/>.
#
---

- set_fact:
    ntypes: "{{ ntypes | default({}) | combine( {item.split('=')[0]: item.split('=')[1]}) }}"
  with_items: "{{ (node_types | default('')).split(',') }}"
  tags:
    - non_aws

- set_fact:
    kube_type: "--kube-type=\"{{ ntypes[ansible_hostname] }}\""
  when:
      ansible_hostname in ntypes
  tags:
    - non_aws

- name: Add node to master
  shell: python "{{ master_kd_src_path }}/manage.py" add-node --hostname {{ ansible_hostname }} {{ kube_type | default("") }} --do-deploy {{ add_testing_repo }} --docker-options="{{ docker_options|default('')}}" {{ zfs_node_params }}
  delegate_facts: True
  delegate_to: "{{ groups['master'][0] }}"
  tags:
    - non_aws

- set_fact: _hostname={{ hostvars[item].ansible_fqdn or hostvars[item].ansible_hostname }}
  with_items: "{{ groups['node'] }}"
  register: _hostnames

- set_fact: hostnames="{{ _hostnames.results|map(attribute='ansible_facts._hostname')|list|join(',')}}"

- name: Wait for nodes
  run_once: true
  shell: python "{{ master_kd_src_path }}/manage.py" wait-for-nodes --nodes "{{ hostnames }}" --timeout {{ wait_node_timeout }}
  delegate_facts: True
  delegate_to: "{{ groups['master'][0] }}"
  changed_when: False
  register: wait_for_nodes_result
  ignore_errors: True

- name: Fetching node deploy log
  fetch: src="{{ node_deploy_log_file }}" dest={{ node_deploy_log_file_dst }} fail_on_missing=yes flat=yes
  when: wait_for_nodes_result|failed
  delegate_facts: True
  delegate_to: "{{ groups['master'][0] }}"

- set_fact:
    deploy_log: "{{ lookup('file', node_deploy_log_file_dst).split('\n') }}"
  when: wait_for_nodes_result|failed

- debug: var=deploy_log
  when: wait_for_nodes_result|failed

- fail: msg="=== Node `{{ ansible_hostname }}` deploy failed ==="
  when: wait_for_nodes_result|failed

- group: name=docker state=present
- name: Adding existing user to group docker
  user:
    name: '{{ ansible_user }}'
    groups: docker
    append: true
  register: docker_user

- name: Restart docker
  service: name=docker state=restarted
  when: docker_user.changed
