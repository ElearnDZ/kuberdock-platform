---

- set_fact:
    ntypes: "{{ ntypes | default({}) | combine( {item.split('=')[0]: item.split('=')[1]}) }}"
  with_items: "{{ (node_types | default('')).split(',') }}"

- set_fact:
    kube_type: "--kube-type={{ ntypes[ansible_hostname] }}"
  when:
      ansible_hostname in ntypes

- name: Add node to master
  shell: python "{{ master_kd_src_path }}/manage.py" add-node --hostname {{ ansible_hostname }} {{ kube_type | default("") }} --do-deploy {{ add_testing_repo }} --docker-options="{{ docker_options|default('')}}"
  delegate_facts: True
  delegate_to: "{{ groups['master'][0] }}"
  tags:
    - deploy

- set_fact: _hostname={{ hostvars[item].ansible_hostname }}
  with_items: "{{ groups['node'] }}"
  register: _hostnames
  tags:
    - node_deploy

- set_fact: hostnames="{{ _hostnames.results|map(attribute='ansible_facts._hostname')|list|join(',')}}"
  tags:
    - node_deploy

- name: Wait for nodes
  run_once: true
  shell: python "{{ master_kd_src_path }}/manage.py" wait-for-nodes --nodes "{{ hostnames }}" --timeout 600
  delegate_facts: True
  delegate_to: "{{ groups['master'][0] }}"
  changed_when: False
  register: wait_for_nodes_result
  ignore_errors: True
  tags:
    - node_deploy

- name: Fetching node deploy log
  fetch: src="{{ node_deploy_log_file }}" dest={{ node_deploy_log_file_dst }} fail_on_missing=yes flat=yes
  when: wait_for_nodes_result|failed
  delegate_facts: True
  delegate_to: "{{ groups['master'][0] }}"
  tags:
    - node_deploy

- set_fact:
    deploy_log: "{{ lookup('file', node_deploy_log_file_dst).split('\n') }}"
  when: wait_for_nodes_result|failed
  tags:
    - node_deploy

- debug: var=deploy_log
  when: wait_for_nodes_result|failed
  tags:
    - node_deploy

- fail: msg="=== Node `{{ ansible_hostname }}` deploy failed ==="
  when: wait_for_nodes_result|failed
  tags:
    - node_deploy
